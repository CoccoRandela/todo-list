(()=>{"use strict";var n={870:(n,e,t)=>{t.d(e,{Z:()=>s});var o=t(537),r=t.n(o),a=t(645),i=t.n(a)()(r());i.push([n.id,"/* Header */\n\ndiv.project-list-head, div.project-head {\n    display: flex;\n}\n\ndiv.project-list-head > h1, div.project-head > h1 {\n    margin: 0;\n}\n\n/* Project list */\n\n.content > div.projects-container {\n    min-height: 90%;\n    display: grid; \n    grid-auto-rows: minmax(min-content, max-content);\n}\n\n/* Projects */\n\ndiv.project {\n    min-width: 100%;\n    display: flex;\n    justify-content: space-between;\n    justify-self: center;\n    border: 1px solid black;\n}\n\n/* New Project button */\n\n.project-list-head > .new-project-btn , .project-head > .new-todo-btn {\n    margin-left: auto;\n}\n\n/* Form */\n\n.content > div.form-container {\n    position: absolute;\n    top: 0;\n    left: 0;\n    min-width: 100%;\n    min-height: 100%;\n    display: grid;\n}\n\ndiv.form-container > form.new-project-form {\n    align-self: center;\n    justify-self: center;\n}\n\nform.new-project-form > div {\n    display: flex;\n    flex-direction: column;\n}\n\n\n","",{version:3,sources:["webpack://./src/pages/indexes/styles.css"],names:[],mappings:"AAAA,WAAW;;AAEX;IACI,aAAa;AACjB;;AAEA;IACI,SAAS;AACb;;AAEA,iBAAiB;;AAEjB;IACI,eAAe;IACf,aAAa;IACb,gDAAgD;AACpD;;AAEA,aAAa;;AAEb;IACI,eAAe;IACf,aAAa;IACb,8BAA8B;IAC9B,oBAAoB;IACpB,uBAAuB;AAC3B;;AAEA,uBAAuB;;AAEvB;IACI,iBAAiB;AACrB;;AAEA,SAAS;;AAET;IACI,kBAAkB;IAClB,MAAM;IACN,OAAO;IACP,eAAe;IACf,gBAAgB;IAChB,aAAa;AACjB;;AAEA;IACI,kBAAkB;IAClB,oBAAoB;AACxB;;AAEA;IACI,aAAa;IACb,sBAAsB;AAC1B",sourcesContent:["/* Header */\n\ndiv.project-list-head, div.project-head {\n    display: flex;\n}\n\ndiv.project-list-head > h1, div.project-head > h1 {\n    margin: 0;\n}\n\n/* Project list */\n\n.content > div.projects-container {\n    min-height: 90%;\n    display: grid; \n    grid-auto-rows: minmax(min-content, max-content);\n}\n\n/* Projects */\n\ndiv.project {\n    min-width: 100%;\n    display: flex;\n    justify-content: space-between;\n    justify-self: center;\n    border: 1px solid black;\n}\n\n/* New Project button */\n\n.project-list-head > .new-project-btn , .project-head > .new-todo-btn {\n    margin-left: auto;\n}\n\n/* Form */\n\n.content > div.form-container {\n    position: absolute;\n    top: 0;\n    left: 0;\n    min-width: 100%;\n    min-height: 100%;\n    display: grid;\n}\n\ndiv.form-container > form.new-project-form {\n    align-self: center;\n    justify-self: center;\n}\n\nform.new-project-form > div {\n    display: flex;\n    flex-direction: column;\n}\n\n\n"],sourceRoot:""}]);const s=i},28:(n,e,t)=>{t.d(e,{Z:()=>s});var o=t(537),r=t.n(o),a=t(645),i=t.n(a)()(r());i.push([n.id,"/*Homepage styles*/\n:root {\n    box-sizing: border-box;\n}\n\n\nbody {\n    margin: 0;\n    height: 100vh;\n}\n\nheader > h2 {\n    margin: 0;\n}\n\ndiv.container {\n    display: grid;\n    grid-auto-flow: column;\n    grid-template-columns: 1fr 4fr;\n}\n\ndiv.content {\n    /*min-height: 100%;*/\n    flex-grow: 1;\n    \n}\n","",{version:3,sources:["webpack://./src/styles.css"],names:[],mappings:"AAAA,kBAAkB;AAClB;IACI,sBAAsB;AAC1B;;;AAGA;IACI,SAAS;IACT,aAAa;AACjB;;AAEA;IACI,SAAS;AACb;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,8BAA8B;AAClC;;AAEA;IACI,oBAAoB;IACpB,YAAY;;AAEhB",sourcesContent:["/*Homepage styles*/\n:root {\n    box-sizing: border-box;\n}\n\n\nbody {\n    margin: 0;\n    height: 100vh;\n}\n\nheader > h2 {\n    margin: 0;\n}\n\ndiv.container {\n    display: grid;\n    grid-auto-flow: column;\n    grid-template-columns: 1fr 4fr;\n}\n\ndiv.content {\n    /*min-height: 100%;*/\n    flex-grow: 1;\n    \n}\n"],sourceRoot:""}]);const s=i},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",o=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),o&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),o&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,o,r,a){"string"==typeof n&&(n=[[null,n,void 0]]);var i={};if(o)for(var s=0;s<this.length;s++){var c=this[s][0];null!=c&&(i[c]=!0)}for(var d=0;d<n.length;d++){var l=[].concat(n[d]);o&&i[l[0]]||(void 0!==a&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=a),t&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=t):l[2]=t),r&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=r):l[4]="".concat(r)),e.push(l))}},e}},537:n=>{n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),a="/*# ".concat(r," */"),i=t.sources.map((function(n){return"/*# sourceURL=".concat(t.sourceRoot||"").concat(n," */")}));return[e].concat(i).concat([a]).join("\n")}return[e].join("\n")}},379:n=>{var e=[];function t(n){for(var t=-1,o=0;o<e.length;o++)if(e[o].identifier===n){t=o;break}return t}function o(n,o){for(var a={},i=[],s=0;s<n.length;s++){var c=n[s],d=o.base?c[0]+o.base:c[0],l=a[d]||0,u="".concat(d," ").concat(l);a[d]=l+1;var p=t(u),A={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==p)e[p].references++,e[p].updater(A);else{var m=r(A,o);o.byIndex=s,e.splice(s,0,{identifier:u,updater:m,references:1})}i.push(u)}return i}function r(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,r){var a=o(n=n||[],r=r||{});return function(n){n=n||[];for(var i=0;i<a.length;i++){var s=t(a[i]);e[s].references--}for(var c=o(n,r),d=0;d<a.length;d++){var l=t(a[d]);0===e[l].references&&(e[l].updater(),e.splice(l,1))}a=c}}},569:n=>{var e={};n.exports=function(n,t){var o=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(t)}},216:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},565:(n,e,t)=>{n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},795:n=>{n.exports=function(n){var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var o="";t.supports&&(o+="@supports (".concat(t.supports,") {")),t.media&&(o+="@media ".concat(t.media," {"));var r=void 0!==t.layer;r&&(o+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),o+=t.css,r&&(o+="}"),t.media&&(o+="}"),t.supports&&(o+="}");var a=t.sourceMap;a&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleTagTransform(o,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},589:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}}},e={};function t(o){var r=e[o];if(void 0!==r)return r.exports;var a=e[o]={id:o,exports:{}};return n[o](a,a.exports,t),a.exports}t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var o in e)t.o(e,o)&&!t.o(n,o)&&Object.defineProperty(n,o,{enumerable:!0,get:e[o]})},t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),t.nc=void 0,(()=>{var n=t(379),e=t.n(n),o=t(795),r=t.n(o),a=t(569),i=t.n(a),s=t(565),c=t.n(s),d=t(216),l=t.n(d),u=t(589),p=t.n(u),A=t(28),m={};function f(n,e){const t=document.createElement("div");t.classList.add(e);const o=document.createElement("h1");return o.textContent=n,t.append(o),t}function h(n){const e=document.createElement("button");return e.classList.add(n),e.textContent="+",e}function v(n,e,t){const o=document.createElement("div");o.classList.add(e);for(let e of n)t(e,o);return o}m.styleTagTransform=p(),m.setAttributes=c(),m.insert=i().bind(null,"head"),m.domAPI=r(),m.insertStyleElement=l(),e()(A.Z,m),A.Z&&A.Z.locals&&A.Z.locals;class g{constructor(n){this.name=n}todos=[];addTodo(n){this.todos.push(n),this.populateStorage()}removeTodo(n){this.todos=this.todos.filter((e=>e!==n)),this.populateStorage()}populate(){return JSON.parse(localStorage.getItem(`${this.name}-todos`))}populateStorage(){localStorage.setItem(`${this.name}-todos`,JSON.stringify(this.todos))}}const C={list:null,populate:()=>JSON.parse(localStorage.getItem("projects-list")),populateStorage(){localStorage.setItem("projects-list",JSON.stringify(this.list))},addProject(n){const e=new g(n);return this.list.push(e),this.populateStorage(),e},removeProject(n){this.list=this.list.filter((e=>e!==n)),this.populateStorage()},get(){return this.populate()?this.list=this.populate():(this.list=new Array,this.populateStorage(this.list)),this.list}};function y(n,e){const t=function(n){console.log(n.name);const e=document.createElement("div");e.classList.add("project");const t=document.createElement("p");t.textContent=n.name,t.addEventListener("click",(()=>{!function(n){for(;n.hasChildNodes();)n.removeChild(n.lastChild)}(document.querySelector(".content")),function(n){const e=document.querySelector(".content"),t=f(n.name,"project-head"),o=v(n.todos,"todo-container",console.log("yo")),r=h("new-todo-btn");t.append(r),e.append(t,o)}(n)}));const o=document.createElement("button");return o.addEventListener("click",(()=>{!function(n,e){C.removeProject(n),e.remove()}(n,e)})),o.textContent="delete",e.append(t,o),e}(n);e.append(t)}function b(){const n=document.createElement("div");n.classList.add("form-container");const e=document.createElement("form");e.classList.add("new-todo-form");const t=document.createElement("div"),o=document.createElement("label");o.textContent="Name",o.setAttribute("for","name");const r=document.createElement("input");r.setAttribute("type","text"),r.setAttribute("id","name"),t.append(o,r);const a=document.createElement("button");return a.textContent="Create Project",a.setAttribute("type","button"),a.addEventListener("click",(()=>{y(C.addProject(r.value),document.querySelector(".projects-container")),function(n){n.remove()}(n)})),e.append(t,a),n.append(e),n}var j=t(870),I={};I.styleTagTransform=p(),I.setAttributes=c(),I.insert=i().bind(null,"head"),I.domAPI=r(),I.insertStyleElement=l(),e()(j.Z,I),j.Z&&j.Z.locals&&j.Z.locals,function(){const n=document.querySelector(".content"),e=f("Projects","project-list-head"),t=v(C.get(),"projects-container",y),o=h("new-project-btn");o.onclick=()=>function(n,e){const t=n();e.appendChild(t)}(b,n),e.append(o),n.append(e,t)}()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,